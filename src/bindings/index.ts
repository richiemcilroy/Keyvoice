
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async getAudioDevices() : Promise<Result<AudioDevice[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_audio_devices") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setRecordingDevice(deviceId: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_recording_device", { deviceId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getCurrentDevice() : Promise<Result<string | null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_current_device") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async checkPermissions() : Promise<Result<Permissions, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("check_permissions") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async startRecording() : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("start_recording") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async stopRecording() : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("stop_recording") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async stopRecordingChunked() : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("stop_recording_chunked") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async stopRecordingManual() : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("stop_recording_manual") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async requestMicrophonePermission() : Promise<Result<boolean, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("request_microphone_permission") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async requestAccessibilityPermission() : Promise<Result<boolean, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("request_accessibility_permission") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async refreshPermissions() : Promise<Result<Permissions, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("refresh_permissions") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getWordCount() : Promise<Result<number, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_word_count") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async updateWordCount(count: number) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("update_word_count", { count }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getRecordingStats() : Promise<Result<RecordingStatsUpdated, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_recording_stats") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getHotkey() : Promise<Result<string | null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_hotkey") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setHotkey(hotkey: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_hotkey", { hotkey }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async validateHotkey(hotkey: string) : Promise<Result<boolean, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("validate_hotkey", { hotkey }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async insertTextAtCursor(text: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("insert_text_at_cursor", { text }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async showMainWindow() : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("show_main_window") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getTranscripts(limit: number | null) : Promise<Result<Transcript[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_transcripts", { limit }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getTranscriptStats() : Promise<Result<TranscriptStats, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_transcript_stats") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async deleteTranscript(id: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("delete_transcript", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async clearAllTranscripts() : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("clear_all_transcripts") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async isFnKeyPressed() : Promise<Result<boolean, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("is_fn_key_pressed") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async testFnKey() : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("test_fn_key") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async checkModelDownloaded() : Promise<Result<boolean, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("check_model_downloaded") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async downloadWhisperModel() : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("download_whisper_model") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getModelPath() : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_model_path") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getAvailableModels() : Promise<Result<WhisperModelInfo[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_available_models") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getDownloadedModels() : Promise<Result<string[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_downloaded_models") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getSelectedModel() : Promise<Result<string | null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_selected_model") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setSelectedModel(modelId: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_selected_model", { modelId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setGroqApiKey(key: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_groq_api_key", { key }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async clearGroqApiKey() : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("clear_groq_api_key") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async hasGroqApiKey() : Promise<Result<boolean, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("has_groq_api_key") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getWhisperSettings() : Promise<Result<[string | null, number | null], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_whisper_settings") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setWhisperSettings(language: string | null, temperature: number | null) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_whisper_settings", { language, temperature }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/


export const events = __makeEvents__<{
audioLevelUpdate: AudioLevelUpdate,
fnKeyStateChanged: FnKeyStateChanged,
hotkeyPressed: HotkeyPressed,
modelDownloadComplete: ModelDownloadComplete,
modelDownloadProgress: ModelDownloadProgress,
recordingStateChanged: RecordingStateChanged,
recordingStatsUpdated: RecordingStatsUpdated,
transcriptionProgress: TranscriptionProgress,
wordCountUpdated: WordCountUpdated
}>({
audioLevelUpdate: "audio-level-update",
fnKeyStateChanged: "fn-key-state-changed",
hotkeyPressed: "hotkey-pressed",
modelDownloadComplete: "model-download-complete",
modelDownloadProgress: "model-download-progress",
recordingStateChanged: "recording-state-changed",
recordingStatsUpdated: "recording-stats-updated",
transcriptionProgress: "transcription-progress",
wordCountUpdated: "word-count-updated"
})

/** user-defined constants **/



/** user-defined types **/

export type AudioDevice = { name: string; id: string; is_default: boolean }
export type AudioLevelUpdate = { level: number }
export type FnKeyStateChanged = { is_pressed: boolean }
export type HotkeyPressed = { pressed: boolean }
export type ModelDownloadComplete = { success: boolean; error: string | null }
export type ModelDownloadProgress = { progress: number; downloaded_bytes: number; total_bytes: number }
export type Permission = { state: PermissionState; name: string }
export type PermissionState = "NotNeeded" | "NotRequested" | "Granted" | "Denied"
export type Permissions = { microphone: Permission; accessibility: Permission }
export type RecordingStateChanged = { is_recording: boolean }
export type RecordingStatsUpdated = { total_words: number; total_time_ms: number; overall_wpm: number; session_words: number; session_time_ms: number; session_wpm: number }
export type Transcript = { id: string; text: string; timestamp: number; duration_ms: number; word_count: number; wpm: number; model_used: string | null }
export type TranscriptStats = { total_words: number; total_time_ms: number; total_characters: number; overall_wpm: number; transcript_count: number }
export type TranscriptionProgress = { text: string; is_final: boolean }
export type WhisperModelInfo = { id: string; name: string; size_mb: number; description: string; url: string; filename: string; recommended_for: string[] }
export type WordCountUpdated = { count: number }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
